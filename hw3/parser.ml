type token =
  | NUM of (int)
  | ID of (string)
  | INT
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | EQUAL
  | EQUALEQUAL
  | LE
  | LT
  | GE
  | GT
  | NOT
  | AND
  | OR
  | IF
  | ELSE
  | WHILE
  | DO
  | READ
  | PRINT
  | SEMICOLON
  | LBRACE
  | RBRACE
  | LBLOCK
  | RBLOCK
  | LPAREN
  | RPAREN
  | EOF
  | TRUE
  | FALSE

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"

# 40 "parser.ml"
let yytransl_const = [|
  259 (* INT *);
  260 (* PLUS *);
  261 (* MINUS *);
  262 (* STAR *);
  263 (* SLASH *);
  264 (* EQUAL *);
  265 (* EQUALEQUAL *);
  266 (* LE *);
  267 (* LT *);
  268 (* GE *);
  269 (* GT *);
  270 (* NOT *);
  271 (* AND *);
  272 (* OR *);
  273 (* IF *);
  274 (* ELSE *);
  275 (* WHILE *);
  276 (* DO *);
  277 (* READ *);
  278 (* PRINT *);
  279 (* SEMICOLON *);
  280 (* LBRACE *);
  281 (* RBRACE *);
  282 (* LBLOCK *);
  283 (* RBLOCK *);
  284 (* LPAREN *);
  285 (* RPAREN *);
    0 (* EOF *);
  286 (* TRUE *);
  287 (* FALSE *);
    0|]

let yytransl_block = [|
  257 (* NUM *);
  258 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\000\000"

let yylen = "\002\000\
\002\000\003\000\002\000\003\000\011\000\007\000\007\000\004\000\
\004\000\003\000\003\000\003\000\001\000\001\000\003\000\001\000\
\001\000\002\000\003\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\013\000\014\000\000\000\000\000\000\000\000\000\016\000\017\000\
\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\
\000\000\000\000\018\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\008\000\009\000\015\000\000\000\000\000\012\000\
\022\000\000\000\000\000\021\000\000\000\000\000\000\000\000\000\
\000\000\007\000\000\000\000\000\000\000\005\000"

let yydgoto = "\002\000\
\008\000\009\000\025\000\026\000"

let yysindex = "\006\000\
\058\255\000\000\006\255\251\254\014\255\033\255\038\255\000\000\
\002\000\009\255\004\255\004\255\041\255\009\255\058\255\000\000\
\000\000\000\000\009\255\021\255\004\255\004\255\000\000\000\000\
\059\255\244\254\249\254\043\255\015\255\000\000\052\255\009\255\
\009\255\009\255\000\000\045\255\000\255\009\255\009\255\004\255\
\046\255\054\255\000\000\000\000\000\000\076\255\076\255\000\000\
\000\000\021\255\021\255\000\000\058\255\058\255\048\255\060\255\
\049\255\000\000\063\255\058\255\061\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\009\000\000\000\
\000\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\004\000\000\000\
\000\000\001\255\047\255\000\000\000\000\000\000\000\000\000\000\
\013\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\241\255\014\000\019\000"

let yytablesize = 294
let yytable = "\030\000\
\010\000\016\000\040\000\011\000\017\000\018\000\001\000\040\000\
\003\000\017\000\018\000\004\000\006\000\010\000\040\000\019\000\
\041\000\021\000\032\000\033\000\034\000\042\000\011\000\020\000\
\032\000\033\000\034\000\029\000\049\000\019\000\027\000\022\000\
\031\000\023\000\024\000\036\000\019\000\055\000\056\000\035\000\
\037\000\012\000\028\000\044\000\061\000\046\000\047\000\048\000\
\032\000\033\000\034\000\050\000\051\000\038\000\039\000\032\000\
\033\000\034\000\052\000\003\000\013\000\020\000\032\000\033\000\
\034\000\014\000\059\000\038\000\039\000\053\000\015\000\043\000\
\057\000\045\000\004\000\020\000\005\000\054\000\006\000\007\000\
\045\000\034\000\015\000\015\000\058\000\062\000\060\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000\010\000\000\000\011\000\
\011\000\010\000\010\000\000\000\011\000\011\000\000\000\010\000\
\000\000\000\000\011\000\000\000\000\000\000\000\000\000\010\000\
\015\000\010\000\011\000\000\000\011\000\010\000\000\000\003\000\
\011\000\003\000\004\000\006\000\004\000\006\000"

let yycheck = "\015\000\
\000\000\000\000\015\001\000\000\001\001\002\001\001\000\015\001\
\000\000\001\001\002\001\000\000\000\000\008\001\015\001\015\001\
\029\001\014\001\004\001\005\001\006\001\029\001\028\001\010\000\
\004\001\005\001\006\001\014\000\029\001\029\001\012\000\028\001\
\019\000\030\001\031\001\022\000\028\001\053\000\054\000\021\000\
\022\000\028\001\002\001\029\001\060\000\032\000\033\000\034\000\
\004\001\005\001\006\001\038\000\039\000\009\001\010\001\004\001\
\005\001\006\001\040\000\002\001\028\001\015\001\004\001\005\001\
\006\001\028\001\018\001\009\001\010\001\024\001\023\001\029\001\
\025\001\029\001\017\001\029\001\019\001\024\001\021\001\022\001\
\029\001\006\001\023\001\023\001\025\001\025\001\024\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\004\001\005\001\255\255\004\001\
\005\001\009\001\010\001\255\255\009\001\010\001\255\255\015\001\
\255\255\255\255\015\001\255\255\255\255\255\255\255\255\023\001\
\023\001\025\001\023\001\255\255\025\001\029\001\255\255\023\001\
\029\001\025\001\023\001\023\001\025\001\025\001"

let yynames_const = "\
  INT\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  SLASH\000\
  EQUAL\000\
  EQUALEQUAL\000\
  LE\000\
  LT\000\
  GE\000\
  GT\000\
  NOT\000\
  AND\000\
  OR\000\
  IF\000\
  ELSE\000\
  WHILE\000\
  DO\000\
  READ\000\
  PRINT\000\
  SEMICOLON\000\
  LBRACE\000\
  RBRACE\000\
  LBLOCK\000\
  RBLOCK\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  TRUE\000\
  FALSE\000\
  "

let yynames_block = "\
  NUM\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 26 "parser.mly"
             ( _1 )
# 249 "parser.ml"
               : While.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 30 "parser.mly"
                        ( While.SEQ (_1, _3) )
# 257 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 31 "parser.mly"
                   ( _1 )
# 264 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 32 "parser.mly"
                  ( While.ASSIGN (_1, _3) )
# 272 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'bexp) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'stmt) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 33 "parser.mly"
                                                                     ( While.IF (_3,_6,_10) )
# 281 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'bexp) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 34 "parser.mly"
                                             ( While.IF (_3,_6,While.SKIP) )
# 289 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'bexp) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 35 "parser.mly"
                                                (While.WHILE (_3,_6))
# 297 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 36 "parser.mly"
                          ( While.READ _3 )
# 304 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'aexp) in
    Obj.repr(
# 37 "parser.mly"
                             ( While.PRINT _3 )
# 311 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'aexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 41 "parser.mly"
                    ( While.ADD (_1,_3) )
# 319 "parser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'aexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 42 "parser.mly"
                    ( While.SUB (_1,_3) )
# 327 "parser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'aexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 43 "parser.mly"
                    ( While.MUL (_1,_3) )
# 335 "parser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 44 "parser.mly"
        ( While.NUM _1 )
# 342 "parser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 45 "parser.mly"
       ( While.VAR _1 )
# 349 "parser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'aexp) in
    Obj.repr(
# 46 "parser.mly"
                       ( _2 )
# 356 "parser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 50 "parser.mly"
         ( While.TRUE )
# 362 "parser.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 51 "parser.mly"
          ( While.FALSE )
# 368 "parser.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'bexp) in
    Obj.repr(
# 52 "parser.mly"
             ( While.NEG _2 )
# 375 "parser.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'aexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 53 "parser.mly"
                         ( While.EQ (_1,_3) )
# 383 "parser.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'aexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 54 "parser.mly"
                 ( While.LE (_1,_3) )
# 391 "parser.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bexp) in
    Obj.repr(
# 55 "parser.mly"
                  ( While.AND (_1,_3) )
# 399 "parser.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bexp) in
    Obj.repr(
# 56 "parser.mly"
                       ( _2 )
# 406 "parser.ml"
               : 'bexp))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : While.program)
;;
# 59 "parser.mly"

let parse_error s = print_endline s
# 434 "parser.ml"
